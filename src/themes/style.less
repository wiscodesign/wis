.component-style(@component; @widget:''; @variant:''; @status:''; @state:''; @state2:'') {
  @widget-pattern: if(@widget= '', '', ~'@{widget}-');
  @variant-pattern: if(@variant= '', '', ~'@{variant}-');
  @status-pattern: if(@status= '', '', ~'@{status}-');
  @state-pattern: if(@state= '', '', ~'@{state}-');
  @state2-pattern: if(@state2= '', '', ~'@{state2}-');

  color: var(
    ~'--w-component-@{component}-@{variant-pattern}@{widget-pattern}@{status-pattern}@{state-pattern}@{state2-pattern}font'
  );
  background-color: var(
    ~'--w-component-@{component}-@{variant-pattern}@{widget-pattern}@{status-pattern}@{state-pattern}@{state2-pattern}background'
  );
  border-color: var(
    ~'--w-component-@{component}-@{variant-pattern}@{widget-pattern}@{status-pattern}@{state-pattern}@{state2-pattern}border'
  );
}

/**
 * Applies hover and disabled styles to a component.
 *
 * @param {String} @component - The name of the component.
 * @param {String} @widget - The widget type (optional).
 * @param {String} @variant - The variant of the component (optional).
 * @param {String} @status - The status of the component (optional).
 * @param {String} @state - The state of the component (optional).
 *
 * This mixin applies the appropriate styles when the component is hovered over or disabled.
 * - On hover, it applies the hover styles using the .component-style mixin.
 * - When the component is disabled (either via the disabled attribute or data-disabled attribute),
 *   it applies the disabled styles and sets the cursor to not-allowed.
 * - Additionally, it ensures that the hover styles are not applied when the component is disabled.
 */
.component-hover-style(@component; @widget:''; @variant:''; @status:''; @state:'';) {
  &:hover {
    .component-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: hover);
  }

  &[disabled],
  &[data-disabled] {
    &:hover {
      .component-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: disabled);
    }
  }
}

/**
 * Applies focus styles to a component.
 *
 * @param {String} @component - The name of the component.
 * @param {String} @widget - The widget type (optional).
 * @param {String} @variant - The variant of the component (optional).
 * @param {String} @status - The status of the component (optional).
 * @param {String} @state - The state of the component (optional).
 *
 * This mixin applies focus styles to the specified component. It includes a conditional
 * check for the status to determine the focus status pattern. When the component is focused,
 * it applies the focus styles and a box-shadow. If the component is disabled, it applies
 * the disabled styles and removes the box-shadow on focus.
 */
.component-focus-style(@component; @widget:''; @variant:''; @status:''; @state:'';) {
  @focus-status-pattern: if(@status= '', 'default', @status);

  &:focus {
    .component-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: focus);
    box-shadow:
      0 0 0 2px var(--w-common-shadow-state-focus-inner),
      0 0 0 4px var(~'--w-common-shadow-state-focus-@{focus-status-pattern}');
  }

  &[disabled],
  &[data-disabled] {
    &:focus {
      .component-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: disabled);
      box-shadow: none;
    }
  }
}

/**
 * Applies active and disabled styles to a component.
 *
 * @param {String} @component - The name of the component.
 * @param {String} @widget - The widget associated with the component (optional).
 * @param {String} @variant - The variant of the component (optional).
 * @param {String} @status - The status of the component (optional).
 * @param {String} @state - The state of the component (optional).
 *
 * The mixin applies styles for the active state of the component.
 * If the component has a `data-disabled` attribute, it applies disabled styles.
 * Additionally, it ensures that the active state is styled correctly even when the component is disabled.
 */
.component-active-style(@component; @widget:''; @variant:''; @status:''; @state:'';) {
  &:active {
    .component-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: active);
  }

  &[disabled],
  &[data-disabled] {
    &:active {
      .component-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: disabled);
    }
  }
}

/**
 * Applies a disabled style to a component.
 *
 * @param {String} @component - The name of the component.
 * @param {String} @widget - The widget associated with the component (optional).
 * @param {String} @variant - The variant of the component (optional).
 * @param {String} @status - The status of the component (optional).
 * @param {String} @state - The state of the component (optional).
 *
 * When the component has the attribute `data-disabled`, it applies the disabled styles
 * and sets the cursor to 'not-allowed'.
 */
.component-disabled-style(@component; @widget:''; @variant:''; @status:''; @state:'';) {
  &[disabled],
  &[data-disabled] {
    .component-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: disabled);
    cursor: not-allowed;
  }
}
