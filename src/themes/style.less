/**
 * Generates styles for a given component based on various parameters.
 *
 * @param {String} @type - The type of the component (e.g., 'container', 'component').
 * @param {String} @component - The name of the component (e.g., 'button', 'card').
 * @param {String} [@widget=''] - Optional widget modifier.
 * @param {String} [@variant=''] - Optional variant modifier.
 * @param {String} [@status=''] - Optional status modifier.
 * @param {String} [@state=''] - Optional state modifier.
 * @param {String} [@state2=''] - Optional secondary state modifier.
 *
 * The function constructs CSS variable names dynamically based on the provided parameters
 * and applies the corresponding color, background-color, and border-color styles.
 */
.style(@type; @component; @widget:''; @variant:''; @status:''; @state:''; @state2:'') {
  @widget-pattern: if(@widget= '', '', ~'@{widget}-');
  @variant-pattern: if(@variant= '', '', ~'@{variant}-');
  @status-pattern: if(@status= '', '', ~'@{status}-');
  @state-pattern: if(@state= '', '', ~'@{state}-');
  @state2-pattern: if(@state2= '', '', ~'@{state2}-');

  color: var(
    ~'--w-@{type}-@{component}-@{variant-pattern}@{widget-pattern}@{status-pattern}@{state-pattern}@{state2-pattern}font'
  );
  background-color: var(
    ~'--w-@{type}-@{component}-@{variant-pattern}@{widget-pattern}@{status-pattern}@{state-pattern}@{state2-pattern}background'
  );
  border-color: var(
    ~'--w-@{type}-@{component}-@{variant-pattern}@{widget-pattern}@{status-pattern}@{state-pattern}@{state2-pattern}border'
  );
}

.component-style(@component; @widget:''; @variant:''; @status:''; @state:''; @state2:'') {
  .style(@type: 'component'; @component: @component; @widget: @widget; @variant: @variant; @status: @status; @state: @state; @state2: @state2);
}

.component-hover-style(@component; @widget:''; @variant:''; @status:''; @state:'';) {
  &:hover {
    .component-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: hover);
  }

  &[disabled],
  &[data-disabled] {
    &:hover {
      .component-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: disabled);
    }
  }
}

.component-focus-style(@component; @widget:''; @variant:''; @status:''; @state:'';) {
  @focus-status-pattern: if(@status= '', 'default', @status);

  &:focus {
    .component-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: focus);
    box-shadow:
      0 0 0 2px var(--w-common-shadow-state-focus-inner),
      0 0 0 4px var(~'--w-common-shadow-state-focus-@{focus-status-pattern}');
  }

  &[disabled],
  &[data-disabled] {
    &:focus {
      .component-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: disabled);
      box-shadow: none;
    }
  }
}

.component-active-style(@component; @widget:''; @variant:''; @status:''; @state:'';) {
  &:active {
    .component-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: active);
  }

  &[disabled],
  &[data-disabled] {
    &:active {
      .component-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: disabled);
    }
  }
}

.component-disabled-style(@component; @widget:''; @variant:''; @status:''; @state:'';) {
  &[disabled],
  &[data-disabled] {
    .component-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: disabled);
    cursor: not-allowed;
  }
}

.container-style(@component; @widget:''; @variant:''; @status:''; @state:''; @state2:'') {
  .style(@type: 'container'; @component: @component; @widget: @widget; @variant: @variant; @status: @status; @state: @state; @state2: @state2);
}

.container-hover-style(@component; @widget:''; @variant:''; @status:''; @state:'';) {
  &:hover {
    .container-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: hover);
  }

  &[disabled],
  &[data-disabled] {
    &:hover {
      .container-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: disabled);
    }
  }
}

.container-focus-style(@component; @widget:''; @variant:''; @status:''; @state:'';) {
  @focus-status-pattern: if(@status= '', 'default', @status);

  &:focus {
    .container-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: focus);
    box-shadow:
      0 0 0 2px var(--w-common-shadow-state-focus-inner),
      0 0 0 4px var(~'--w-common-shadow-state-focus-@{focus-status-pattern}');
  }

  &[disabled],
  &[data-disabled] {
    &:focus {
      .container-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: disabled);
      box-shadow: none;
    }
  }
}

.container-active-style(@component; @widget:''; @variant:''; @status:''; @state:'';) {
  &:active {
    .container-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: active);
  }

  &[disabled],
  &[data-disabled] {
    &:active {
      .container-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: disabled);
    }
  }
}

.container-disabled-style(@component; @widget:''; @variant:''; @status:''; @state:'';) {
  &[disabled],
  &[data-disabled] {
    .container-style(@component: @component, @widget: @widget, @variant: @variant, @status: @status, @state: @state, @state2: disabled);
    cursor: not-allowed;
  }
}
