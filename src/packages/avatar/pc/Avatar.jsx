import PropTypes from 'prop-types'
import classNames from 'classnames'
import attrs from '@/utils/attrs'
import * as RDXAvatar from '@radix-ui/react-avatar'

import getInitials from '../initials'

import styles from './Avatar.module.scss'

function Avatar({
  className,
  icon,
  src,
  size = 'md',
  color = 'gray',
  variant = 'light',
  shape = 'circle',
  name,
  initials,
  ...rest
}) {
  const fallback = getInitials({ name, initials })

  const isShowImage = !!src
  const isShowIcon = !!icon

  return (
    <RDXAvatar.Root asChild>
      <div
        {...rest}
        className={classNames(styles.avatar, { [className]: !!className })}
        data-variant={variant}
        data-size={size}
        data-color={color}
        data-shape={shape}
        {...attrs({
          'aria-label': isShowImage ? undefined : name,
        })}
      >
        {isShowImage && <RDXAvatar.Image className={styles.image} src={src} alt={name}></RDXAvatar.Image>}
        <RDXAvatar.Fallback className={styles.fallback} delayMs={isShowImage ? 500 : undefined} asChild>
          {isShowIcon ? icon : <span>{fallback}</span>}
        </RDXAvatar.Fallback>
      </div>
    </RDXAvatar.Root>
  )
}

Avatar.displayName = 'Avatar'
Avatar.propTypes = {
  /**
   * @hidden
   */
  className: PropTypes.string,

  /**
   * Icon element to be displayed.
   */
  icon: PropTypes.element,

  /**
   * The url of the displayed avatar image.
   */
  src: PropTypes.string,

  /**
   * Size of avatar
   */
  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg']),

  /**
   * Color of the avatar
   */
  color: PropTypes.oneOf(['gray', 'blue', 'purple', 'orange', 'red', 'green']),

  /**
   * Variant of the avatar
   */
  variant: PropTypes.oneOf(['light', 'solid', 'outline']),

  /**
   * The shape of the avatar
   */
  shape: PropTypes.oneOf(['circle', 'square']),

  /**
   * The full name of the user avatar
   */
  name: PropTypes.string.isRequired,

  /**
   * Set the text to be displayed to replace the text automatically generated by name.
   */
  initials: PropTypes.string,
}

export default Avatar
